#include <iostream>
#include "map.h"
#include "Entity.h"

using namespace std;
/*
I have two versions of the map because I need to clear the map, and essentially I reset the map then add the new positions of each entity. 
I do this because we don't keep track of where the previous position of the entity is, so we need to clear or else there will be multiple sprites on the map.
*/
char basearr[14][35] = { '+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+',' ','+', ' ', ' ',' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+' };


static char actualArr[14][35] = { '+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+',' ','+', ' ', ' ',' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ','+',
'+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+' };

// This prints the map.
void printMap(){
    for(int row = 0; row < 14; row++){
        for (int col = 0; col < 35; col++){
            cout << actualArr[row][col];
        }
        cout <<endl;
    }
}

// First it resets the map. Then it looks through an array of entities and puts them in their new locations, if there is a wall it won't do anything.
// Then it prints the map. Since I do some wall checking in Entity, there shouldn't be a problem of there being a wall. 
void updateObject(Entity entityArr[], int size){
    system("CLS");
    clearMap();
    for(int person = 0; person < size; person++){
        if(actualArr[entityArr[person].getY()][entityArr[person].getX()] != '+'){
            actualArr[entityArr[person].getY()][entityArr[person].getX()] = entityArr[person].getSprite();
        }
    }
    printMap();
}

// Resets the map.
void clearMap(){
    for(int row = 0; row < 14; row++){
        for (int col = 0; col < 35; col++){
            actualArr[row][col] = basearr[row][col];
        }
    }
}

// returns if there is a wall at a specific position.
bool getPosition(int x, int y){
    if(actualArr[y][x] == '+'){
        return false;
    }
    else{
        return true;
    }
}